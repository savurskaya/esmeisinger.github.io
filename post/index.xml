<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Academic</title>
    <link>https://example.com/post/</link>
      <atom:link href="https://example.com/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Mon, 06 Mar 2023 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Posts</title>
      <link>https://example.com/post/</link>
    </image>
    
    <item>
      <title>Что делать, если стало скучно в общежитии?</title>
      <link>https://example.com/post/jupyter/</link>
      <pubDate>Mon, 06 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/jupyter/</guid>
      <description>&lt;h1 id=&#34;мои-любимые-занятияэто&#34;&gt;Мои любимые занятия,это&amp;hellip;&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Бисероплетение. Это занятие может затянуть меня на несколько минут, часов, дней. В основном, я делаю колечки, браслетики, бусики. Пока что мой скилл не прокачен, но я иду к этому.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Доставать соседей. Нет, ну а что такого? Я просто захожу в разные комнаты и начинаю вести беседу. В половине случаев меня посылают туда, откуда я пришла. Нооо, я все равно добиваюсь своего.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Смотреть &amp;ldquo;Постучись в мою дверь&amp;rdquo;. Или как называю это я, смотреть Серкана Болата. Иногда смотрю на турецком, но это только по вторниками.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Готовить. Можно увлечься, и приготовить себе пропитание на неделю вперед.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Пойти помыться. Можно вообще устроить СПА-день. Вот поэтому я всегда хорошо выгляжу, просто потому что мне часто становится скучно.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Язык разметки Markdown.</title>
      <link>https://example.com/post/jupyter-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/</link>
      <pubDate>Mon, 06 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/jupyter-%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/</guid>
      <description>&lt;h1 id=&#34;все-о-git&#34;&gt;Все о Git.&lt;/h1&gt;
&lt;p&gt;Markdown — это облегченный язык разметки, использующийся для форматирования простого текста. Главной особенностью языка является простой синтаксис, что делает его максимально удобным для чтения и понимания человеком. Markdown пригоден для преобразования в языки для продвинутых публикаций, например HTML, Rich Text и т.д.&lt;/p&gt;
&lt;p&gt;Черновики для блога&lt;/p&gt;
&lt;p&gt;Этот язык разметки совместим с кучей онлайн-редакторов и блог-платформ. Можно написать черновик для своего блога в Markdown, а потом опубликовать его за секунды — все ссылки, заголовки и форматирование будут выглядеть так, как вы и задумывали. Это вам не из Word копировать. Списки задач&lt;/p&gt;
&lt;p&gt;В Markdown-редакторах очень просто создавать списки покупок, дел и рабочих заданий. Некоторые гики используют обычный текстовый файл todo.txt как альтернативу модным Wunderlist и Todoist. Как это сделать, можно узнать на сайте Todo.txt. Мессенджеры&lt;/p&gt;
&lt;p&gt;Даже некоторые мессенджеры поддерживают Markdown. Например, в Telegram вы с его помощью можете применить жирное или курсивное выделение. Преимущества Markdown Универсальность&lt;/p&gt;
&lt;p&gt;Документы, написанные с использованием синтаксиса Markdown, представляют собой обычные текстовые файлы TXT. Их можно открыть на любой платформе и в любом редакторе. Этим они выгодно отличаются от файлов, созданных в текстовых процессорах. Пробовали открыть документ из Apple Pages в Word? Простота&lt;/p&gt;
&lt;p&gt;Markdown настолько прост, что его за 10 минут смогут освоить даже те, кто до этого не слышал про все эти ваши Latex и HTML. Решётки для подзаголовков, звёздочки для выделения, тире для списков. Проще быть не может. Большой выбор инструментов&lt;/p&gt;
&lt;p&gt;Редакторов для работы с документами Markdown очень, очень много. Есть и онлайновые, и мобильные, и настольные инструменты. Есть монструозный Atom, красивые и минималистичные ghostwriter и iA Writer, Vim для гиков и Ulysses для профессиональных писателей. Выбирай не хочу. Конвертируемость&lt;/p&gt;
&lt;p&gt;Документы Markdown легко экспортировать в любые форматы: PDF, DOC, ODT. При этом их форматирование остаётся неизменным. Недостатки Markdown Ограниченность форматирования&lt;/p&gt;
&lt;p&gt;Так как документы Markdown представляют собой просто текстовые файлы, красивых шрифтов в них не применишь. Всё-таки это скорее инструмент для написания черновиков, чем для полноценной вёрстки. Строгие правила&lt;/p&gt;
&lt;p&gt;В Markdown текст оформляется посредством служебных символов. Один лишний знак * или #, и форматирование изменится. Так что при наборе текстов в Markdown придётся быть внимательным. Базовый синтаксис&lt;/p&gt;
&lt;p&gt;Тексты в Markdown оформляются посредством специальных символов, вставляемых перед или после слов и фраз.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Масленица: какая начинка для блинов вкуснее всего. Мнение эксперта.</title>
      <link>https://example.com/post/getting-started/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/getting-started/</guid>
      <description>&lt;h1 id=&#34;топ-5-самых-вкусных-начинок-на-масленицу&#34;&gt;Топ-5 самых вкусных начинок на Масленицу&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Красная рыба. Это мое са-а-амое любимое. А если с творожным сыром, то вообще&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Сметана. Нежная. сливочная. Определенно достойна второго места в топе.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Красная икра. Чтобы показать родственникам, что такое богатая жизнь. И вкусно, и понты.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Мед. Не подходит тем, у кого аллергия. Жестко слишком.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Варенье. Просто, и со вкусом.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Управление версиями.Git.</title>
      <link>https://example.com/post/writing-technical-content/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/writing-technical-content/</guid>
      <description>&lt;h1 id=&#34;все-о-git&#34;&gt;Все о Git.&lt;/h1&gt;
&lt;p&gt;Контроль версий, также известный как управление исходным кодом, — это практика отслеживания изменений программного кода и управления ими. Системы контроля версий — это программные инструменты, помогающие командам разработчиков управлять изменениями в исходном коде с течением времени. В свете усложнения сред разработки они помогают командам разработчиков работать быстрее и эффективнее. Системы контроля версий наиболее полезны командам DevOps, поскольку помогают сократить время разработки и увеличить количество успешных развертываний.&lt;/p&gt;
&lt;p&gt;Программное обеспечение контроля версий отслеживает все вносимые в код изменения в специальной базе данных. При обнаружении ошибки разработчики могут вернуться назад и выполнить сравнение с более ранними версиями кода для исправления ошибок, сводя к минимуму проблемы для всех участников команды. video thumbnail&lt;/p&gt;
&lt;p&gt;Практически во всех программных проектах исходный код является сокровищем: это ценный ресурс, который необходимо беречь. Для большинства команд разработчиков программного обеспечения исходный код — это репозиторий бесценных знаний и понимания проблемной области, которые они скрупулезно собирали и совершенствовали. Контроль версий защищает исходный код от катастрофических сбоев, от случайных ухудшений, вызванных человеческим фактором, а также от непредвиденных последствий.&lt;/p&gt;
&lt;p&gt;Разработчики программного обеспечения, работающие в командах, постоянно пишут новый исходный код и изменяют существующий. Код проекта, приложения или программного компонента обычно организован в виде структуры папок или «дерева файлов». Один разработчик в команде может работать над новой возможностью, а другой в это же время изменять код для исправления несвязанной ошибки, т. е. каждый разработчик может вносить свои изменения в несколько частей дерева файлов.&lt;/p&gt;
&lt;p&gt;Контроль версий помогает командам решать подобные проблемы путем отслеживания каждого изменения, внесенного каждым участником, и предотвращать возникновение конфликтов при параллельной работе. Изменения, внесенные в одну часть программного обеспечения, могут быть не совместимы с изменениями, внесенными другим разработчиком, работавшим параллельно. Такая проблема должна быть обнаружена и решена согласно регламенту, не создавая препятствий для работы остальной части команды. Кроме того, во время разработки программного обеспечения любое изменение может само по себе привести к появлению новых ошибок, и новому ПО нельзя доверять до тех пор, пока оно не пройдет тестирование. Вот почему процессы тестирования и разработки идут рука об руку, пока новая версия не будет готова.&lt;/p&gt;
&lt;p&gt;Хорошее программное обеспечение для управления версиями поддерживает предпочтительный рабочий процесс разработчика, не навязывая определенный способ работы. В идеале оно также работает на любой платформе и не принуждает разработчика использовать определенную операционную систему или цепочку инструментов. Хорошие системы управления версиями обеспечивают плавный и непрерывный процесс внесения изменений в код и не прибегают к громоздкому и неудобному механизму блокировки файлов, который дает зеленый свет одному разработчику, но при этом блокирует работу других.&lt;/p&gt;
&lt;p&gt;Группы разработчиков программного обеспечения, не использующие какую-либо форму управления версиями, часто сталкиваются с такими проблемами, как незнание об изменениях, выполненных для пользователей, или создание в двух несвязанных частях работы изменений, которые оказываются несовместимыми и которые затем приходится скрупулезно распутывать и перерабатывать. Если вы как разработчик ранее никогда не применяли управление версиями, возможно, вы указывали версии своих файлов, добавляя суффиксы типа «финальный» или «последний», а позже появлялась новая финальная версия. Возможно, вы использовали комментирование блоков кода, когда хотели отключить определенные возможности, не удаляя их, так как опасались, что этот код может понадобиться позже. Решением всех подобных проблем является управление версиями.&lt;/p&gt;
&lt;p&gt;Программное обеспечение для управления версиями является неотъемлемой частью повседневной профессиональной практики современной команды разработчиков программного обеспечения. Отдельные разработчики ПО, привыкшие работать в команде с эффективной системой управления версиями, обычно признают невероятную пользу управления версиями даже при работе над небольшими сольными проектами. Привыкнув к мощным преимуществам систем контроля версий, многие разработчики не представляют как работать без них даже в проектах, не связанных с разработкой ПО. Преимущества систем контроля версий&lt;/p&gt;
&lt;p&gt;Программное обеспечение контроля версий рекомендуется для продуктивных команд разработчиков и команд DevOps. Управление версиями помогает отдельным разработчикам работать быстрее, а командам по разработке ПО — сохранять эффективность и гибкость по мере увеличения числа разработчиков.&lt;/p&gt;
&lt;p&gt;За последние несколько десятилетий системы контроля версий (Version Control Systems, VCS) стали гораздо более совершенными, причем некоторым это удалось лучше других. Системы VCS иногда называют инструментами SCM (управления исходным кодом) или RCS (системой управления редакциями). Один из наиболее популярных на сегодняшний день инструментов VCS называется Git. Git относится к категории распределенных систем контроля версий, известных как DVCS (эта тема будет рассмотрена подробнее чуть позже). Git, как и многие другие популярные и доступные на сегодняшний день системы VCS, распространяется бесплатно и имеет открытый исходный код.&lt;/p&gt;
&lt;p&gt;Разрабатывать программное обеспечение можно и без управления версиями, но такой подход подвергает проект огромному риску, и ни одна профессиональная команда не порекомендует применять его. Таким образом, вопрос заключается не в том, использовать ли управление версиями, а в том, какую систему управления версиями выбрать.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
